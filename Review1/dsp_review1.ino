static const double hreal[ 128 ] = {
0.22761174809101192, -0.5675633403629848, 0.9475852487255862, -1.0011981315477367, 0.9979605678976183, -0.9931044795582629, 0.992510714384454, -0.9854388896948436, 0.8203775228376207, -0.33838873545484016, 0.02850647087970808, 0.0016963434594047255, -0.00014372447906083052, -0.0004083359367996059, -0.000417259160820551, -0.0003754885471210206, -0.00032738221379612385, -0.00028347677597257944, -0.0002457476507568125, -0.0002138807411837504, -0.0001870300556544289, -0.00016432926570183136, -0.00014502777337626127, -0.00012851029050050817, -0.000114282384928861, -0.00010194888503394725, -9.119356147328401e-05, -8.17622332091784e-05, -7.344937384174713e-05, -6.608769808770436e-05, -5.9540119887641626e-05, -5.369354425228179e-05, -4.84540601256786e-05, -4.374319993566411e-05, -3.949501211670571e-05, -3.565375545113228e-05, -3.217207139691314e-05, -2.9009525956445043e-05, -2.613143901034759e-05, -2.3507938679501184e-05, -2.1113192959047733e-05, -1.892478186926727e-05, -1.692318167751186e-05, -1.5091339029882356e-05, -1.3414317634533046e-05, -1.1879003814829758e-05, -1.047386009287235e-05, -9.188718166146595e-06, -8.014604361003227e-06, -6.943591995826171e-06, -5.968676155403824e-06, -5.08366722220299e-06, -4.283100185957091e-06, -3.562157297639355e-06, -2.9166020667145687e-06, -2.342722960929633e-06, -1.8372854531101268e-06, -1.3974913006253864e-06, -1.0209441371755723e-06, -7.056206234867801e-07, -4.49846539907206e-07, -2.522773203672557e-07, -1.1188262910577507e-07, -2.7934670632223657e-08, 0.0, -2.7934670687734808e-08, -1.1188262910577507e-07, -2.522773203672557e-07, -4.49846539907206e-07, -7.05620623431269e-07, -1.0209441371755723e-06, -1.3974913006808976e-06, -1.8372854531101268e-06, -2.342722960929633e-06, -2.9166020666764048e-06, -3.5621572977151406e-06, -4.28310018596445e-06, -5.083667222113841e-06, -5.968676155373304e-06, -6.943591995779361e-06, -8.014604361003227e-06, -9.188718166210454e-06, -1.047386009286346e-05, -1.1879003814846143e-05, -1.341431763457598e-05, -1.5091339029821857e-05, -1.6923181677525766e-05, -1.892478186926998e-05, -2.1113192959081323e-05, -2.3507938679507323e-05, -2.6131439010330602e-05, -2.9009525956450355e-05, -3.2172071396932315e-05, -3.56537554512128e-05, -3.949501211673534e-05, -4.374319993565801e-05, -4.84540601256786e-05, -5.3693544252331193e-05, -5.954011988767126e-05, -6.608769808767387e-05, -7.34493738417108e-05, -8.176223320918372e-05, -9.119356147326702e-05, -0.00010194888503395338, -0.00011428238492889459, -0.00012851029050045537, -0.00014502777337627518, -0.00016432926570178474, -0.00018703005565441633, -0.00021388074118369738, -0.00024574765075680363, -0.00028347677597251493, -0.00032738221379612385, -0.0003754885471210119, -0.0004172591608205205, -0.0004083359367995584, -0.0001437244790608379, 0.0016963434594048023, 0.028506470879708118, -0.33838873545484016, 0.8203775228376207, -0.9854388896948434, 0.992510714384454, -0.9931044795582628, 0.9979605678976183, -1.0011981315477367, 0.9475852487255862, -0.567563340362985
};

static const double himag[ 128 ] = {
0.0, -0.013932897965450323, 0.046551878157905124, -0.07385281101495722, 0.09829053682734899, -0.12248775480820992, 0.14722505696060867, -0.17098986782202816, 0.16318323521269054, -0.07598773161471181, 0.007140499236440095, 0.00046944145817615426, -4.3598344076280215e-05, -0.0001348959724846461, -0.0001492977150124291, -0.0001448419157718912, -0.00013560615303408267, -0.00012565661268474894, -0.00011622998256600038, -0.00010765851791360112, -9.996964750481933e-05, -9.309137916392687e-05, -8.692630210496217e-05, -8.137824396640495e-05, -7.63610482999645e-05, -7.180050578752483e-05, -6.763375468316418e-05, -6.380787306688399e-05, -6.0278343311586036e-05, -5.700764041969002e-05, -5.396401910327711e-05, -5.112050379514387e-05, -4.84540601256786e-05, -4.5944919692106345e-05, -4.357603076029885e-05, -4.133261100802352e-05, -3.920178242258765e-05, -3.7172272206210943e-05, -3.523416674020008e-05, -3.337870829090567e-05, -3.1598126250802216e-05, -2.9885496382629773e-05, -2.8234622866749742e-05, -2.663993898793446e-05, -2.509642312822219e-05, -2.3599527372951748e-05, -2.2145116564229947e-05, -2.0729416028509966e-05, -1.9348966545388585e-05, -1.8000585372065562e-05, -1.6681332354021052e-05, -1.5388480317825195e-05, -1.4119489077703698e-05, -1.2871982497495381e-05, -1.1643728138508672e-05, -1.0432619100719798e-05, -9.23665771701554e-06, -8.053940816737937e-06, -6.882646308867257e-06, -5.72102087339349e-06, -4.5673685680272524e-06, -3.4200401890435717e-06, -2.2774232335230626e-06, -1.137932327902394e-06, 0.0, 1.1379323279006592e-06, 2.2774232334848987e-06, 3.420040188967244e-06, 4.56736856797868e-06, 5.7210208734073675e-06, 6.882646308881135e-06, 8.053940816682426e-06, 9.236657716987784e-06, 1.043261910076837e-05, 1.1643728138482218e-05, 1.2871982497556639e-05, 1.4119489077722702e-05, 1.5388480317788875e-05, 1.6681332354025538e-05, 1.800058537207872e-05, 1.9348966545388585e-05, 2.0729416028476627e-05, 2.2145116564232332e-05, 2.3599527373029973e-05, 2.5096423128243372e-05, 2.6639938987949244e-05, 2.8234622866748285e-05, 2.9885496382611267e-05, 3.15981262508709e-05, 3.33787082909176e-05, 3.523416674020357e-05, 3.7172272206171567e-05, 3.9201782422617005e-05, 4.133261100805745e-05, 4.3576030760282265e-05, 4.594491969212309e-05, 4.84540601256786e-05, 5.11205037950907e-05, 5.396401910326594e-05, 5.7007640419607514e-05, 6.0278343311542804e-05, 6.380787306683317e-05, 6.763375468313293e-05, 7.180050578741576e-05, 7.636104829995133e-05, 8.137824396634713e-05, 8.692630210499139e-05, 9.309137916383228e-05, 9.996964750481202e-05, 0.000107658517913568, 0.00011622998256602575, 0.0001256566126847285, 0.00013560615303408267, 0.00014484191577187976, 0.00014929771501245235, 0.00013489597248472751, 4.3598344076330604e-05, -0.0004694414581762398, -0.007140499236440041, 0.07598773161471192, -0.16318323521269057, 0.17098986782202824, -0.14722505696060872, 0.12248775480821011, -0.098290536827349, 0.07385281101495728, -0.04655187815790511, 0.013932897965450393
};
#include <driver/i2s.h>
#include <arduinoFFT.h>
#include <stdint.h>
#define I2S_WS 15
#define I2S_SD 13
#define I2S_SCK 2
#define I2S_PORT I2S_NUM_0
#define sample_no 128
#define sample_index_last 127
#define sampling_rate 44100


void i2s_install(){
  static const i2s_config_t i2s_config = {
    .mode = i2s_mode_t(I2S_MODE_MASTER | I2S_MODE_RX),
    .sample_rate = sampling_rate,
    .bits_per_sample = i2s_bits_per_sample_t(16),
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = i2s_comm_format_t(I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB),
    .intr_alloc_flags = 0, // default interrupt priority
    .dma_buf_count = 8,
    .dma_buf_len = 64,
    .use_apll = false
  };

  i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);
}

void i2s_setpin(){
  static const i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_SCK,
    .ws_io_num = I2S_WS,
    .data_out_num = -1,
    .data_in_num = I2S_SD
  };

  i2s_set_pin(I2S_PORT, &pin_config);
}
void FFT(double *xreal,double *ximag){

  

  ArduinoFFT<double> FFT = ArduinoFFT<double>(xreal, ximag, sample_no, sampling_rate);
  FFT.windowing(FFTWindow::Hamming, FFTDirection::Forward);	/* Weigh data */
  FFT.compute(FFTDirection::Forward); /* Compute FFT */
  }

void complex_array_multiply( double *v1Real,  double *v1Img,
                             const double *v2Real, const double *v2Img,
                             double *r1Real, double *r1Img)
{
    for (uint8_t i = 0; i <= sample_index_last; i++) {
        r1Real[i] = v1Real[i] * v2Real[i] - v1Img[i] * v2Img[i];
        r1Img[i]  = v1Real[i] * v2Img[i] + v1Img[i] * v2Real[i];
    }
}
void IFFT(double *xreal,double *ximag){

  

  ArduinoFFT<double> FFT = ArduinoFFT<double>(xreal, ximag, sample_no, sampling_rate);
  FFT.compute(FFTDirection::Reverse);
 /* Compute IFFT */
}

void setup() {
  Serial.begin(115200);
  i2s_install();
  i2s_setpin();
  i2s_start(I2S_PORT);
  delay(500);
}

void loop() {
  double res_real[sample_no];
  double res_img[sample_no];
  double xreal[sample_no];
  double xImag[sample_no]={0};
  int32_t sample_buffer[sample_no] ;
  size_t bytes = 0;
  i2s_read(I2S_PORT, &sample_buffer, sizeof(sample_buffer), &bytes, 100);
  if(bytes == sizeof(sample_buffer)){

    for (uint8_t i = 0; i <= sample_index_last; i++) {
    xreal[i] = (double)sample_buffer[i];
    }
    FFT(xreal,xImag);
    complex_array_multiply( xreal, xImag, hreal , himag, res_real,res_img);
    IFFT(res_real,res_img);
    for (uint8_t i = 0; i <= sample_index_last; i++) { Serial.print(sample_buffer[i]);Serial.print("\t");Serial.println(res_real[i]);}

  }
}

  
    

  







