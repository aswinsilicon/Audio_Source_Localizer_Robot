// Unchanged global arrays and definitions
static const double hreal[ 256 ] = {
0.0008417114875644768, -0.1519474796571758, 0.6387883033901737, -0.9673246288361885, 1.002941881018574, -0.9994297893033115, 0.9990347245225664, -0.9979636003928459, 0.9969366734449696, -0.9954655177766091, 0.9943311317107739, -0.9923523123466036, 0.9911149159916729, -0.9886978509508711, 0.9870590279718017, -0.9857696730190157, 0.9668015417847853, -0.6992702549516276, 0.20685413671150998, -0.005093919183542444, -0.0007815683393144818, -0.00041823166274354253, -0.0003200288393628378, -0.00026855206462858495, -0.0002325352642793692, -0.00020449474979090124, -0.00018167372580832946, -0.00016266096554175076, -0.0001465752522317955, -0.0001328056416889944, -0.00012090436972791704, -0.00011053234761044313, -0.00010142706846026387, -9.338190827705813e-05, -8.62320084910004e-05, -7.984429422226658e-05, -7.411023682432596e-05, -6.894050495742017e-05, -6.426094944643667e-05, -6.0009549017334295e-05, -5.613405952781921e-05, -5.259018540764616e-05, -4.934014347164248e-05, -4.63515248064878e-05, -4.35963853769345e-05, -4.105051376617673e-05, -3.869283729144267e-05, -3.650493708964864e-05, -3.4470649665857556e-05, -3.257573753512322e-05, -3.080761545259242e-05, -2.9155121639506953e-05, -2.760832565879001e-05, -2.6158366305394087e-05, -2.479731420830522e-05, -2.351805488734482e-05, -2.231418881456365e-05, -2.1179945684089707e-05, -2.0110110600955744e-05, -1.909996031342759e-05, -1.8145207936352825e-05, -1.724195489091751e-05, -1.638664898282252e-05, -1.5576047739841378e-05, -1.4807186253303073e-05, -1.4077348899043697e-05, -1.3384044405893858e-05, -1.2724983821902833e-05, -1.2098060998213742e-05, -1.150133525990027e-05, -1.0933015989970929e-05, -1.039144888500057e-05, -9.875103675754948e-06, -9.382563137962097e-06, -8.912513237015196e-06, -8.46373427589725e-06, -8.035092929556398e-06, -7.625535063844613e-06, -7.234079255694081e-06, -6.859810930216759e-06, -6.501877055004046e-06, -6.1594813276777405e-06, -5.8318798057122034e-06, -5.518376931842384e-06, -5.218321918056322e-06, -4.931105445681989e-06, -4.656156657006422e-06, -4.392940403507081e-06, -4.140954731251428e-06, -3.899728575748751e-06, -3.668819651779032e-06, -3.4478125141893624e-06, -3.236316779932561e-06, -3.0339654908264374e-06, -2.84041361051075e-06, -2.6553366380086075e-06, -2.478429331767314e-06, -2.309404532938283e-06, -2.1479920800239444e-06, -1.9939378066679268e-06, -1.847002616384727e-06, -1.706961627914166e-06, -1.5736033850973592e-06, -1.446729126602166e-06, -1.3261521109100838e-06, -1.2116969915623786e-06, -1.1031992404605213e-06, -1.000504614125737e-06, -9.034686603062703e-07, -8.119562632320949e-07, -7.258412224181443e-07, -6.450058653295621e-07, -5.693406905371567e-07, -4.987440389569997e-07, -4.3312179143217833e-07, -3.7238709388320856e-07, -3.1646010273389535e-07, -2.652677565939676e-07, -2.1874356592732624e-07, -1.7682742592395329e-07, -1.3946544585863307e-07, -1.0660979987697772e-07, -7.821859276946341e-08, -5.42557448413028e-08, -3.46908923809508e-08, -1.9499304670933526e-08, -8.661815820154573e-09, -2.164773152402155e-09, 2.0816681711721685e-17, -2.1647731385243674e-09, -8.661815820154573e-09, -1.9499304615422375e-08, -3.46908923809508e-08, -5.42557448413028e-08, -7.821859288048572e-08, -1.0660979998800002e-07, -1.3946544585863307e-07, -1.7682742592395329e-07, -2.187435659828374e-07, -2.652677565939676e-07, -3.164601026783842e-07, -3.723870937166751e-07, -4.331217914876895e-07, -4.987440390125109e-07, -5.693406905371567e-07, -6.450058652185398e-07, -7.258412222932442e-07, -8.119562632017373e-07, -9.034686603179255e-07, -1.0005046140730447e-06, -1.1031992404915295e-06, -1.2116969916000817e-06, -1.3261521109100838e-06, -1.4467291266173854e-06, -1.5736033850818822e-06, -1.7069616278382312e-06, -1.8470026164019116e-06, -1.9939378066637797e-06, -2.1479920800604007e-06, -2.3094045329828168e-06, -2.478429331767314e-06, -2.655336638026822e-06, -2.8404136105086695e-06, -3.033965490826241e-06, -3.236316779897975e-06, -3.4478125142325814e-06, -3.6688196517594757e-06, -3.899728575740111e-06, -4.140954731251435e-06, -4.392940403553167e-06, -4.656156657003573e-06, -4.9311054457052585e-06, -5.218321918074083e-06, -5.5183769318285065e-06, -5.831879805679244e-06, -6.159481327733252e-06, -6.501877055004046e-06, -6.859810930182064e-06, -7.234079255742654e-06, -7.625535063809918e-06, -8.035092929570276e-06, -8.463734275855617e-06, -8.912513236966624e-06, -9.382563137899647e-06, -9.875103675761887e-06, -1.0391448885073429e-05, -1.0933015990012562e-05, -1.1501335259990475e-05, -1.2098060998173843e-05, -1.2724983821904567e-05, -1.3384044405841816e-05, -1.4077348899051503e-05, -1.4807186253303073e-05, -1.5576047739904696e-05, -1.638664898282599e-05, -1.7241954890863734e-05, -1.814520793642395e-05, -1.909996031335126e-05, -2.0110110600941866e-05, -2.1179945684107054e-05, -2.231418881457059e-05, -2.351805488733788e-05, -2.479731420831216e-05, -2.6158366305352454e-05, -2.76083256588594e-05, -2.915512163952777e-05, -3.080761545258548e-05, -3.257573753508852e-05, -3.4470649665857556e-05, -3.650493708970415e-05, -3.8692837291492976e-05, -4.1050513766238315e-05, -4.359638537695736e-05, -4.635152480649142e-05, -4.934014347165354e-05, -5.2590185407702886e-05, -5.6134059527819226e-05, -6.000954901732493e-05, -6.426094944645354e-05, -6.894050495736695e-05, -7.411023682435672e-05, -7.984429422224515e-05, -8.62320084909849e-05, -9.338190827709407e-05, -0.00010142706846026387, -0.00011053234761043602, -0.00012090436972794008, -0.000132805641688969, -0.00014657525223176702, -0.00016266096554168943, -0.0001816737258082949, -0.00020449474979091574, -0.0002325352642793692, -0.0002685520646285778, -0.00032002883936282716, -0.0004182316627434702, -0.0007815683393144987, -0.0050939191835424336, 0.2068541367115101, -0.6992702549516276, 0.9668015417847853, -0.9857696730190159, 0.9870590279718016, -0.988697850950871, 0.991114915991673, -0.9923523123466036, 0.9943311317107739, -0.9954655177766091, 0.9969366734449696, -0.997963600392846, 0.9990347245225664, -0.9994297893033113, 1.002941881018574, -0.9673246288361883, 0.6387883033901737, -0.1519474796571758
};

static const double himag[ 256 ] = {
0.0, -0.0018647697277626258, 0.015681372667527, -0.035628675810066346, 0.04927137511630637, -0.06140132091618618, 0.07369322852559383, -0.08593948694847894, 0.09818969202581802, -0.11039504698717018, 0.12263904792105407, -0.13477759823157165, 0.14701800982761107, -0.15908283127283196, 0.17127098848077976, -0.18353592041322103, 0.19230878346271502, -0.14803664860492444, 0.046450649731881635, -0.0012097265896171322, -0.00019577267749661315, -0.0001102331771087294, -8.856390737146858e-05, -7.787865557377874e-05, -7.05388012408611e-05, -6.478363550336608e-05, -6.0016892242931925e-05, -5.59590485432121e-05, -5.244546385163678e-05, -4.936524119758611e-05, -4.6637961852271056e-05, -4.420279201052305e-05, -4.2012467347988566e-05, -4.0029565955532363e-05, -3.822402048564818e-05, -3.657137617873718e-05, -3.5051531550829686e-05, -3.364780698872453e-05, -3.23462437002497e-05, -3.113506846070439e-05, -3.0004279923757716e-05, -2.894532542803291e-05, -2.7950846030404237e-05, -2.7014473567016902e-05, -2.6130667786821976e-05, -2.529458463965188e-05, -2.450196899091324e-05, -2.3749066645165073e-05, -2.303255174187363e-05, -2.234946648124736e-05, -2.169717080144351e-05, -2.107330014116532e-05, -2.047572980649892e-05, -1.990254476925274e-05, -1.9352013947041696e-05, -1.882256821023054e-05, -1.8312781494677494e-05, -1.7821354520539123e-05, -1.734710070271095e-05, -1.6888933918303428e-05, -1.644585784442952e-05, -1.601695664163981e-05, -1.560138678077111e-05, -1.5198369857704805e-05, -1.480718625332389e-05, -1.4427169529127731e-05, -1.4057701454972711e-05, -1.3698207590506772e-05, -1.3348153347653852e-05, -1.3007040472700487e-05, -1.2674403897714598e-05, -1.2349808916664595e-05, -1.2032848644472766e-05, -1.1723141730726055e-05, -1.1420330293686332e-05, -1.1124078054661202e-05, -1.0834068645868e-05, -1.0550004074572072e-05, -1.0271603330336276e-05, -9.998601111518846e-06, -9.730746668636103e-06, -9.467802745036225e-06, -9.209544608746595e-06, -8.955759164865301e-06, -8.70624414254282e-06, -8.460807345561874e-06, -8.219265965439383e-06, -7.981445946504527e-06, -7.747181401351994e-06, -7.51631406941068e-06, -7.288692818706043e-06, -7.064173181040125e-06, -6.842616923880403e-06, -6.623891650372332e-06, -6.407870429881409e-06, -6.194431452264431e-06, -5.983457706152703e-06, -5.774836678879156e-06, -5.5684600763975606e-06, -5.364223560546216e-06, -5.16202650312451e-06, -4.961771755654641e-06, -4.763365433136938e-06, -4.566716709671683e-06, -4.371737627536758e-06, -4.178342915663184e-06, -3.986449819046715e-06, -3.7959779380904385e-06, -3.6068490736365465e-06, -3.4189870841041647e-06, -3.232317745752167e-06, -3.0467686219087797e-06, -2.86226893819741e-06, -2.67874946249802e-06, -2.496142390090439e-06, -2.314381234436169e-06, -2.13340072115209e-06, -1.953136686216883e-06, -1.7735259785350843e-06, -1.5945063644995372e-06, -1.4160164354057314e-06, -1.2379955188698832e-06, -1.0603835911213166e-06, -8.831211909948733e-07, -7.061493382809481e-07, -5.294094491195556e-07, -3.528432568657147e-07, -1.763927312464558e-07, 0.0, 1.7639273127822291e-07, 3.5284325680326467e-07, 5.294094491126167e-07, 7.061493382844175e-07, 8.831211909705872e-07, 1.0603835911143777e-06, 1.2379955189045777e-06, 1.4160164353987925e-06, 1.594506364506476e-06, 1.7735259785350843e-06, 1.9531366862585164e-06, 2.1334007211382122e-06, 2.314381234436169e-06, 2.496142390076561e-06, 2.678749462511898e-06, 2.86226893819741e-06, 3.046768621881024e-06, 3.2323177457417585e-06, 3.4189870840516893e-06, 3.6068490736450304e-06, 3.795977938056103e-06, 3.986449819048002e-06, 4.178342915698278e-06, 4.371737627536772e-06, 4.566716709712615e-06, 4.763365433120001e-06, 4.961771755585411e-06, 5.162026503122751e-06, 5.364223560616598e-06, 5.568460076438245e-06, 5.774836678905309e-06, 5.983457706152703e-06, 6.194431452270245e-06, 6.407870429855253e-06, 6.623891650345163e-06, 6.842616923889476e-06, 7.06417318104788e-06, 7.288692818685175e-06, 7.516314069388058e-06, 7.747181401351987e-06, 7.981445946502412e-06, 8.21926596542702e-06, 8.460807345551974e-06, 8.706244142549345e-06, 8.95575916488113e-06, 9.209544608755268e-06, 9.46780274506398e-06, 9.730746668636103e-06, 9.998601111532723e-06, 1.027160333030852e-05, 1.0550004074690034e-05, 1.0834068645840245e-05, 1.1124078054640385e-05, 1.1420330293717557e-05, 1.172314173070177e-05, 1.2032848644472766e-05, 1.234980891663684e-05, 1.2674403897752762e-05, 1.3007040472710896e-05, 1.3348153347645178e-05, 1.3698207590418301e-05, 1.405770145499613e-05, 1.442716952916904e-05, 1.480718625332389e-05, 1.5198369857635091e-05, 1.5601386780794528e-05, 1.601695664166236e-05, 1.6445857844420847e-05, 1.6888933918369348e-05, 1.7347100702693602e-05, 1.782135452056688e-05, 1.8312781494677494e-05, 1.8822568210206253e-05, 1.935201394701741e-05, 1.9902544769231922e-05, 2.0475729806526677e-05, 2.1073300141116746e-05, 2.1697170801471266e-05, 2.2349466481205726e-05, 2.303255174187363e-05, 2.3749066645081807e-05, 2.4501968990963546e-05, 2.5294584639625644e-05, 2.6130667786822105e-05, 2.7014473567067338e-05, 2.795084603039445e-05, 2.8945325427981615e-05, 3.0004279923757723e-05, 3.1135068460684745e-05, 3.234624370025246e-05, 3.364780698870843e-05, 3.50515315508539e-05, 3.657137617880538e-05, 3.8224020485638554e-05, 4.0029565955577764e-05, 4.2012467347988566e-05, 4.42027920104679e-05, 4.663796185227137e-05, 4.936524119750939e-05, 5.244546385164342e-05, 5.595904854320987e-05, 6.001689224292534e-05, 6.478363550333966e-05, 7.053880124086109e-05, 7.787865557378317e-05, 8.856390737146862e-05, 0.00011023317710870933, 0.00019577267749658415, 0.0012097265896172367, -0.04645064973188165, 0.1480366486049245, -0.19230878346271502, 0.18353592041322106, -0.1712709884807798, 0.15908283127283185, -0.14701800982761104, 0.1347775982315717, -0.12263904792105405, 0.11039504698717023, -0.09818969202581801, 0.08593948694847894, -0.07369322852559379, 0.06140132091618619, -0.0492713751163064, 0.035628675810066394, -0.015681372667526988, 0.0018647697277626141     
};

#include <driver/i2s.h>
#include <arduinoFFT.h>
#include <stdint.h>
#include <math.h> 
#include <string.h>

#define I2S_WS 15
#define I2S_SD 13
#define I2S_SCK 2
#define I2S_PORT I2S_NUM_0
#define sample_no 256
#define STEREO_SAMPLES_COUNT 512
#define sample_index_last 127
#define sampling_rate 44100

double res_real_L[sample_no];
double res_img_L[sample_no];
double res_real_R[sample_no];
double res_img_R[sample_no];
double G_real[sample_no];
double G_img[sample_no];
double phat_real[sample_no];
double phat_img[sample_no];

// i2s Functions
void i2s_install(){
  static const i2s_config_t i2s_config = {
    .mode = i2s_mode_t(I2S_MODE_MASTER | I2S_MODE_RX),
    .sample_rate = sampling_rate,
    .bits_per_sample = i2s_bits_per_sample_t(24),
    .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT,
    .communication_format = i2s_comm_format_t(I2S_COMM_FORMAT_I2S| I2S_COMM_FORMAT_I2S_MSB),
    .intr_alloc_flags = 0, // default interrupt priority
    .dma_buf_count = 8,
    .dma_buf_len = 64,
    .use_apll = false
  };

  i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);
}

void i2s_setpin(){
  static const i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_SCK,
    .ws_io_num = I2S_WS,
    .data_out_num = -1,
    .data_in_num = I2S_SD
  };

  i2s_set_pin(I2S_PORT, &pin_config);
}

//FFT functions
void FFT(double *xreal,double *ximag){
  ArduinoFFT<double> FFT = ArduinoFFT<double>(xreal, ximag, sample_no, sampling_rate);
  FFT.windowing(FFTWindow::Hamming, FFTDirection::Forward); /* Weigh data */
  FFT.compute(FFTDirection::Forward); /* Compute FFT */
}
void IFFT(double *xreal,double *ximag){
  ArduinoFFT<double> FFT = ArduinoFFT<double>(xreal, ximag, sample_no, sampling_rate);
  FFT.compute(FFTDirection::Reverse);
}


// FIR Filter functions

void complex_array_multiply( double *v1Real,  double *v1Img,const double *v2Real, const double *v2Img,double *r1Real, double *r1Img)
{
    for (uint16_t i = 0; i < sample_no; i++) {
        r1Real[i] = v1Real[i] * v2Real[i] - v1Img[i] * v2Img[i];
        r1Img[i]  = v1Real[i] * v2Img[i] + v1Img[i] * v2Real[i];
    }
}


void FIR_filter(uint8_t l_r,int32_t *sample_buffer, double *res_real, double *res_img)
{
    static double xreal[sample_no];
    static double xImag[sample_no];

   
    memset(xImag, 0, sizeof(xImag));
    for (uint16_t i = 0; i < sample_no; i++) {
        xreal[i] = (double)(sample_buffer[i * 2 + l_r]>>8);
    }
    FFT(xreal,xImag);
    complex_array_multiply( xreal, xImag, hreal , himag, res_real,res_img);
}

double  max_array(double arr[], int n) {
    int idx = 0;
    double max= arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            idx = i;
            max=arr[idx];
        }
    }
    return idx;
}
double dominant_frequency(double *xreal, double *ximag, int N, double fs) {
    int i, maxIndex = 0;
    double mag, maxMag = 0.0;
    double freqResolution = fs / N;

    for (i = 0; i < N/2; i++) { // only first half is unique
        mag = sqrt(xreal[i]*xreal[i] + ximag[i]*ximag[i]);
        if (mag > maxMag) {
            maxMag = mag;
            maxIndex = i;
        }
    }
    return maxIndex * freqResolution;
}


// GCC-PHAT functions

void cross_power_spectrum(const double *xReal, const double *xImag, const double *yReal, const double *yImag, double *gReal, double *gImag, int n) {
  for (int i = 0; i < n; i++) {
    // G = (xReal + j*xImag) * (yReal - j*yImag)
    // G = (xReal*yReal + xImag*yImag) + j*(xImag*yReal - xReal*yImag)
    gReal[i] = xReal[i] * yReal[i] + xImag[i] * yImag[i];
    gImag[i] = xImag[i] * yReal[i] - xReal[i] * yImag[i];
  }
}


double gcc_phat(const double *gReal, const double *gImag, double *phat_real, double *phat_img, int n)
{
  for (int i = 0; i < n; i++)
  {
    // Calculate magnitude: |G| = sqrt(G_real^2 + G_imag^2)
    double magnitude = sqrt(gReal[i] * gReal[i] + gImag[i] * gImag[i]);

    // Normalize: G_phat = G / |G| to prevent division by zero
    if (magnitude > 1e-22) { // Use a small epsilon for float comparison
      phat_real[i] = gReal[i] / magnitude;
      phat_img[i]  = gImag[i] / magnitude;
    } else {
      phat_real[i] = 0.0;
      phat_img[i]  = 0.0;
    }
  }
  IFFT(phat_real, phat_img);
  double maximum = max_array(phat_real, n);
  if (maximum <= n/2) return maximum;
  else return maximum-n;
}

void setup() {
  Serial.begin(115200);
  i2s_install();
  i2s_setpin();
  i2s_start(I2S_PORT);
  delay(500);
}

void loop() {

  static int32_t sample_buffer[STEREO_SAMPLES_COUNT];
  size_t bytes = 0;
  esp_err_t result = i2s_read(I2S_PORT, &sample_buffer, sizeof(sample_buffer), &bytes, 100);

  if (result == ESP_OK && bytes == sizeof(sample_buffer))
  {
    // Perform filtering and FFT on both channels
    FIR_filter(0, sample_buffer, res_real_L, res_img_L);
    FIR_filter(1, sample_buffer, res_real_R, res_img_R);

    double dominant_frqL=dominant_frequency(res_real_L, res_img_L, sample_no, sampling_rate);
    double dominant_frqR=dominant_frequency(res_real_R, res_img_R,  sample_no, sampling_rate);


    // --- Start of GCC-PHAT Calculation ---

    // Calculate the cross-power spectrum: G = FFT(L) * conj(FFT(R))
    cross_power_spectrum(res_real_L, res_img_L, res_real_R, res_img_R, G_real, G_img, sample_no);



    // Calculate GCC-PHAT and find the peak
    double tdoa = ((double)gcc_phat(G_real, G_img, phat_real, phat_img, sample_no))/sampling_rate;
    

  }
}